import { defineEventHandler, getQuery, sendRedirect, setHeader } from "h3";
import { withBase } from "ufo";
import { buildSitemap } from "../sitemap/builder/index.mjs";
import { setupCache } from "../util/cache.mjs";
import { createSitePathResolver, useRuntimeConfig } from "#imports";
import { useNitroApp } from "#internal/nitro";
import { getRouteRulesForPath } from "#internal/nitro/route-rules";
import pages from "#nuxt-simple-sitemap/pages.mjs";
import extraRoutes from "#nuxt-simple-sitemap/extra-routes.mjs";
export default defineEventHandler(async (e) => {
  const { moduleConfig, buildTimeMeta } = useRuntimeConfig()["nuxt-simple-sitemap"];
  if (moduleConfig.sitemaps) {
    return sendRedirect(e, withBase("/sitemap_index.xml", useRuntimeConfig().app.baseURL), process.dev ? 302 : 301);
  }
  const { cachedSitemap, cache } = await setupCache(e, "sitemap", getQuery(e).purge);
  let sitemap = cachedSitemap;
  if (!cachedSitemap) {
    const nitro = useNitroApp();
    const callHook = async (ctx2) => {
      await nitro.hooks.callHook("sitemap:resolved", ctx2);
    };
    const canonicalQuery = getQuery(e).canonical;
    const isShowingCanonical = typeof canonicalQuery !== "undefined" && canonicalQuery !== "false";
    sitemap = await buildSitemap({
      moduleConfig,
      extraRoutes,
      buildTimeMeta,
      canonicalUrlResolver: createSitePathResolver(e, { canonical: isShowingCanonical || !process.dev, absolute: true, withBase: true }),
      relativeBaseUrlResolver: createSitePathResolver(e, { absolute: false, withBase: true }),
      getRouteRulesForPath,
      callHook,
      pages
    });
    const ctx = { sitemap, sitemapName: "sitemap" };
    await nitro.hooks.callHook("sitemap:output", ctx);
    sitemap = ctx.sitemap;
    await cache(sitemap);
  }
  setHeader(e, "Content-Type", "text/xml; charset=UTF-8");
  if (!process.dev)
    setHeader(e, "Cache-Control", "max-age=600, must-revalidate");
  return sitemap;
});
