import { defineEventHandler, getQuery } from "h3";
import { resolveAsyncDataSources } from "../sitemap/entries/index.mjs";
import { createSitePathResolver, useRuntimeConfig } from "#imports";
import pages from "#nuxt-simple-sitemap/pages.mjs";
import extraRoutes from "#nuxt-simple-sitemap/extra-routes.mjs";
import { getRouteRulesForPath } from "#internal/nitro/route-rules";
export default defineEventHandler(async (e) => {
  const { moduleConfig, buildTimeMeta } = useRuntimeConfig()["nuxt-simple-sitemap"];
  let sitemap;
  const sitemapName = getQuery(e).sitemap;
  if (sitemapName) {
    if (typeof moduleConfig.sitemaps === "object" && moduleConfig.sitemaps[sitemapName])
      sitemap = { sitemapName, ...moduleConfig.sitemaps[sitemapName] };
  }
  const config = { ...moduleConfig };
  delete config.urls;
  const sources = (await resolveAsyncDataSources({
    moduleConfig,
    sitemap,
    buildTimeMeta,
    getRouteRulesForPath,
    extraRoutes,
    canonicalUrlResolver: createSitePathResolver(e, { canonical: !process.dev, absolute: true, withBase: true }),
    relativeBaseUrlResolver: createSitePathResolver(e, { absolute: false, withBase: true }),
    pages
  })).map((d) => {
    d.count = d.urls.length;
    return d;
  });
  return {
    _sources: [...sources].filter((s) => {
      return s.urls.length > 0 || s.error;
    }).map((s) => {
      s = { ...s };
      s.urls = s.urls.length || 0;
      return s;
    }),
    moduleConfig: config,
    buildTimeMeta,
    sources
  };
});
