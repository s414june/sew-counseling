import { prefixStorage } from "unstorage";
import { getQuery, setHeader } from "h3";
import { useRuntimeConfig, useStorage } from "#imports";
export async function setupCache(e, key) {
  const { moduleConfig, buildTimeMeta } = useRuntimeConfig()["nuxt-simple-sitemap"];
  const useCache = !process.dev && !process.env.prerender && moduleConfig.runtimeCacheStorage && moduleConfig.cacheTtl && moduleConfig.cacheTtl > 0;
  const baseCacheKey = moduleConfig.runtimeCacheStorage === "default" ? `/cache/nuxt-simple-sitemap${buildTimeMeta.version}` : `/nuxt-simple-sitemap/${buildTimeMeta.version}`;
  const cache = prefixStorage(useStorage(), `${baseCacheKey}/sitemaps`);
  let xSitemapCacheHeader = "MISS";
  let xSitemapCacheExpires = 0;
  const purge = typeof getQuery(e).purge !== "undefined";
  let cachedSitemap = false;
  if (useCache && await cache.hasItem(key)) {
    const { value, expiresAt } = await cache.getItem(key);
    if (expiresAt > Date.now()) {
      if (purge) {
        xSitemapCacheHeader = "PURGE";
        await cache.removeItem(key);
      } else {
        xSitemapCacheHeader = "HIT";
        xSitemapCacheExpires = expiresAt;
        cachedSitemap = value;
      }
    } else {
      await cache.removeItem(key);
    }
  }
  setHeader(e, "x-sitemap-cache", xSitemapCacheHeader);
  setHeader(e, "x-sitemap-cache-expires", xSitemapCacheExpires.toString());
  return {
    cachedSitemap,
    cache: async (sitemap) => {
      if (useCache)
        await cache.setItem(key, { value: sitemap, expiresAt: Date.now() + (moduleConfig.cacheTtl || 0) });
    }
  };
}
