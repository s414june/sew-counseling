import { defineEventHandler, getQuery, setHeader } from "h3";
import { parseURL } from "ufo";
import { buildSitemap } from "../sitemap/builder/index.mjs";
import { setupCache } from "../util/cache.mjs";
import { createSitePathResolver, useNitroApp, useRuntimeConfig } from "#imports";
import { getRouteRulesForPath } from "#internal/nitro/route-rules";
import pages from "#nuxt-simple-sitemap/pages.mjs";
import extraRoutes from "#nuxt-simple-sitemap/extra-routes.mjs";
export default defineEventHandler(async (e) => {
  const path = parseURL(e.path).pathname;
  if (!path.endsWith("-sitemap.xml"))
    return;
  const { moduleConfig, buildTimeMeta } = useRuntimeConfig()["nuxt-simple-sitemap"];
  if (!moduleConfig.sitemaps) {
    return;
  }
  const sitemapName = path.replace("-sitemap.xml", "").replace("/", "");
  if (moduleConfig.sitemaps !== true && !moduleConfig.sitemaps[sitemapName])
    return;
  const { cachedSitemap, cache } = await setupCache(e, sitemapName);
  let sitemap = cachedSitemap;
  if (!sitemap) {
    const nitro = useNitroApp();
    const callHook = async (ctx2) => {
      await nitro.hooks.callHook("sitemap:resolved", ctx2);
    };
    const canonicalQuery = getQuery(e).canonical;
    const isShowingCanonical = typeof canonicalQuery !== "undefined" && canonicalQuery !== "false";
    sitemap = await buildSitemap({
      sitemap: {
        sitemapName,
        ...moduleConfig.sitemaps[sitemapName]
      },
      extraRoutes,
      canonicalUrlResolver: createSitePathResolver(e, { canonical: isShowingCanonical || !process.dev, absolute: true, withBase: true }),
      relativeBaseUrlResolver: createSitePathResolver(e, { absolute: false, withBase: true }),
      moduleConfig,
      buildTimeMeta,
      getRouteRulesForPath,
      callHook,
      pages
    });
    const ctx = { sitemap, sitemapName };
    await nitro.hooks.callHook("sitemap:output", ctx);
    sitemap = ctx.sitemap;
    await cache(sitemap);
  }
  setHeader(e, "Content-Type", "text/xml; charset=UTF-8");
  if (!process.dev)
    setHeader(e, "Cache-Control", "max-age=600, must-revalidate");
  return sitemap;
});
